=== 1. אדאבוסט ===

בשיעור הזה נלמד על אחד האלגוריתמים שנמצאים הכי הרבה בשימוש במאשין לרנינג על נתונים גדולים ובמיוחד על נתונים טבלאיים. יש לו הרבה גירסאות והרבה מימושים מאוד פופולריים, אבל כולם בסופו של דבר נקראים: בוסטינג.

הגירסה הראשונה של האלגוריתם פותחה בתחילת שנות התשעים על-ידי צמד חוקרים בשם פרוינד ושפייר שקיבלו על הפיתוח שלהם את פרס גדל. הגירסה הזאת נקראת: אדאבוסט.

:::

אדאבוסט עוסק ספציפית בקלסיפיקציה לשני קלאסים, 1 ומינוס 1. מאוחר יותר נרחיב אותו לבעיות אחרות.

בסיטואציה הזאת, מה אמרנו שיעשה אלגוריתם כמו רנדום פורסט? הוא יגדל M עצים שנקרא להם T, כל פעם על גירסה קצת אחרת של הנתונים, וכשתגיע תצפית חדשה הוא ימצע את הסיווג שלהם, ואם אנחנו רוצים סיווג סופי של 1 או מינוס 1, ניקח את פונקציה sign.

מהי ביקורת סבירה על רנדום פורסט? למה למצע. אולי יש עצים טובים יותר, ועצים טובים פחות, ואנחנו צריכים לא ממוצע פשוט שלהם אלא ממוצע משוקלל, עם משקולת אלפא-אם לכל עץ.

אבל איך נמצא את המשקולות האופטימליות? הרי אם M הוא מספר כל העצים האפשריים, אולי אפילו נגביל את העומק שלהם, לכל סט נתונים סביר, זה מספר ענק. זה לא שאנחנו יכולים לגדל את כולם ואז להתחיל לבדוק מה סט המשקולות הכי טוב למצע אותם.

אבל בוסטינג יעשה בדיוק את זה, הוא ימצא את המשקולות והעצים האלה בצורה סדרתית אחד אחרי השני, בצורה אדפטיבית.

זה לא חייב להיות עץ, זה יכול להיות כל קלסיפייר חלש, או וויק קלסיפייר G, והכוונה בחלש שיש לו דיוק קצת יותר טוב מאקראי.

אם אנחנו רוצים להיות קצת יותר רשמיים, נניח שסיכוי לסיווג שגוי הוא חצי, אז הקלסיפייר שלנו יכול להשיג על המדגם הנתון שגיאה של קצת פחות מחצי, חצי פחות איזשהו פרמטר גאמא קטן, וזה לכל משקול של הנתונים. אנחנו מרדדים קצת את ההגדרה הרשמית אבל זה מספיק טוב בשבילנו.

ואת הקלסיפייר הזה נתאים לנתונים שלנו, כל פעם על גירסה קצת אחרת כשכל תצפית מקבלת משקולת מתעדכנת,

נתאים את הקלסיפייר וגם נבחר במשקולת הכי טובה עבורו לפי איזושהי פונקצית הפסד, וזה באמת יהיה החיזוי הסופי, הסיין של סכום הקלסיפיירים הממושקלים שאימנו.

:::

ככה נראה אלגוריתם האדאבוסט הרשמי, לא להיבהל, הוא דוקא די פשוט.

אנחנו מתחילים עם משקולות שוות לכל התצפיות, אם יש n תצפיות זה יוצא 1 חלקי n.

ועכשיו בכל איטרציה, אנחנו מגדלים עץ על התצפיות שלנו במשקול הנוכחי w_i. תיכף נדבר על מה זה אומר, לגדל עץ עם משקולות על התצפיות, לא נתקלנו בזה קודם.

מכל מקום, אנחנו מחשבים את השגיאה הממושקלת הנוכחית, כלומר סוכמים את כל השגיאות כאשר כל אחת נכפלת במשקל שלה, ומחלקים בסך המשקולות.

המשקולת לכל הקלסיפייר אלפא-אם מחושבת עכשיו והיא שווה לביטוי שרשום כאן שמבוסס על השגיאה הממושקלת ארר.

והשלב האחרון באיטרציה, עדכון המשקולות לאיטרציה הבאה: המשקולת של כל תצפית תוכפל באקספוננט בחזקת אלפא-אם אם הקלסיפייר הנוכחי עשה טעות על התצפית הזאת, וכפול אקספוננט בחזקת אפס אחרת, כלומר כפול 1 -- או, אם צדקנו המשקולת תישאר כפי שהיא.

נשים לב למה זה הגיוני -- אם טעינו, הכפלה פי אקספוננט בחזקת אלפא, תגדיל את המשקולת, וככה באיטרציה הבאה הקלסיפייר שלנו יצטרך לעבוד קשה יותר כדי לסווג אותה נכון, בניגוד לתצפיות עם משקולות קטנות. עוד דבר שנשים אליו לב, זה שעצים עם שגיאה ארר מאוד קטנה יקבלו משקולות אלפא-אם מאוד גדולות, ועצים עם שגיאה מאוד גדולה יקבלו משקולות אלפא-אם מאוד קטנות.

בכל אופן האאוטפוט של של אדאבוסט הוא מה שרצינו, ממוצע משוקלל של וויק קלסיפיירים, שאנחנו מפעילים עליו פונקצית סיין כדי לקבל חיזוי סופי של 1 ומינוס 1.

נחזור רגע לעניין המשקול - הקלסיפייר שלנו חייב לדעת לטפל נכון בתצפיות ממושקלות. למשל איך מגדלים עץ עם משקולות על התצפיות?
אז אם זה עץ רגרסיה, הלוס שאנחנו עושים עליו מינימום בכל פיצול הוא הRSS, אבל אנחנו לוקחים RSS ממושקל.

ואם זה עץ קלסיפיקציה, אז הלוס שלנו הוא למשל מדד הג'יני, ואנחנו צריכים לחשב בכל צומת את אחוז התצפיות שהן פלוס או מינוס אחת, אז במקום לחשב אותן בצורה הרגילה נחשב את סכום משקולות התצפיות שהן אחת חלקי סכום המשקולות של התצפיות בצומת.

מכל מקום, כעת ברור למה קוראים לאלגוריתם אדאבוסט. הוא לוקח קלסיפייר חלש יחסית, ועושה לו בוסט, בצורה אדאפטיבית. בחלק הבא נראה שבצורה הזאת יש לנו הבטחה, שאנחנו יכולים להוריד את השגיאה על מדגם הלמידה להיות קטנה כרצוננו, כתלות במספר האיטרציות ובפרמטר השגיאה גאמא שאנחנו יכולים להבטיח לכל וויק קלסיפייר. קטנה כרצוננו זה אומר אפילו אפס.

:::

=== 2. דוגמא לאדאבוסט ===

בואו נראה דוגמה פשוטה של אדאבוסט, בדו-מימד.

:::

בדוגמה שלנו יש 10 תצפיות בשני משתנים, ונניח שהאדומות הן פלוס 1 והכחולות הן מינוס 1.

הוויק קלסיפייר שלנו יהיה גזעים של עצים או טרי סטאמפס, כלומר אנחנו מסוגלים בכל איטרציה לעשות רק פיצול אחד על משתנה אחד.

זה קלסיפייר ממש חלש, נכון? נניח האם אפשר עם הקלסיפייר הזה להגיע על הנתונים האלה לשגיאת חיזוי אפס? אי אפשר. המשמעות של טרי-סטאמפ היא שאנחנו יכולים רק לחלק את המרחב של שני המשתנים חלוקה אחת מקבילה לאחת הצירים.

אם היינו מאפשרים עץ עמוק יותר האם היינו צריכים בוסטינג? כנראה שלא (להדגים). אבל זאת רק דוגמה פשוטה.

:::

אז אם אנחנו מתחילים עם כל התצפיות ממושקלות אותו הדבר, כלומר עשירית, הטרי סטאמפ הראשון מוצא לנכון לעשות את החלוקה על פי המשתנה השני, מתחת יחזה כחול ומעל יחזה אדום.

השגיאה הממושקלת שלנו היא שני סיווגים שגויים עם משקולות עשירית חלקי סך משקולות של עשר עשיריות או 0.2. והאלפא שלנו תהיה לוג של 0.8 חלקי 0.2 כלומר לוג 4 או 1.386.

אנחנו ממשקלים מחדש את התצפיות, כאשר המשקולות של התצפיות עם סיווג נכון נשארות עשירית, והמשקולות של התצפיות שסיווגנו לא נכון מוכפלות פי אקספוננט בלוג-4 כלומר פי 4, הן יהיו 0.4.

אנחנו שומרים את המשקולות, את אלפא ואת העץ בצד וממשיכים לעץ הבא.

:::

באיטרציה הבאה אנחנו באמת רואים את המשקולות שחישבנו, ומגדלים סטאמפ חדש. הסטאמפ החדש רואה את הנתונים אחרת, הפעם הוא שם הרבה יותר דגש על לסווג נכון את התצפיות שלא סווגו נכון בעבר ויש להן משקולת של 0.4. ואכן הוא מחלק את המרחב בצורה שונה לחלוטין.

אבל זה יוצר שגיאה ממושקלת חדשה, יש לנו 3 טעויות במשקל כולל 0.3 חלקי סכום המשקלים שהוא 1.6 כלומר שגיאה של 0.188.

האלפא החדשה היא לוג של 0.812 חלקי 0.188, יוצא 1.46.

ושוב נגדיל את המשקל של התצפיות שחזינו לא נכון, נכפיל עשירית פי אקספוננט בחזקת 1.466, צריך לתת 0.43.

:::

וככה אנחנו ממשיכים לסטאמפ הבא.

:::

ולסטאמפ הבא.

:::

ואם נניח שאנחנו עושים את זה 5 איטרציות, כלומר 5 סטאמפים, נעצור.

החיזוי הסופי שלנו לכל נקודה במרחב הזה יהיה פונקציית סיין, על הממוצע המשוקלל של הטרי סטאמפס, G1 עד G5.

אם נצייר את תחום ההחלטה הזה נראה שהוא כבר אחרי 5 איטרציות הגיע לשגיאה אפס, הוא מסווג נכון את כל התצפיות, ובאופן מרשים אדאבוסט לקח את הקלסיפייר החלש הזה שמסוגל למעט מאוד, ועשה לו בוסטינג בצורה אדאפטיבית ככה שהוא יכול לתאר גבול החלטה הרבה יותר מורכב.

:::

כמובטח, אנחנו יכולים להביא את השגיאה על מדגם הלמידה להיות קטנה כרצוננו. ספציפית אנחנו יכולים לחסום אותה על-ידי הביטוי שמופיע כאן, 1 פחות ארבעה גאמא בריבוע בחזקת M חלקי 2. ואפשר להראות בקלות שחסם פשוט יותר הוא סדר גודל של אי בחזקת מינוס פעמיים מספר האיטרציות כפול גאמא בריבוע.

למשל, אם רוצים לחסום את הטעות שלא תהיה גדולה יותר מ1 חלקי n, מה שבפועל אומר שהיא חייבת להיות אפס, אנחנו לא מוכנים לעשות אפילו שגיאה אחת, אז אחרי קצת אלגברה אפשר לקבל חסם תחתון על מספר האיטרציות שאנחנו חייבים לבצע, שהוא סדר גודל של לוג-מספר התצפיות מחולק בפרמטר גאמא בריבוע. שוב כל זה בהנחה שאנחנו מבטיחים שבכל איטרציה הקלסיפייר שלנו טועה עד כדי מרחק גאמא קטן מחצי, השגיאה האקראית.

אז אם לדוגמא יש לכם קלסיפייר די בינוני, הוא יכול לעשות שגיאה של עד 40 אחוז או גאמא שווה 0.1, אחרי 100 איטרציות, הוא הופך להיות קלסיפייר לא רע בכלל עם שגיאה לא גדולה יותר מ13 אחוז, פשוט מציבים בחסם.

ואם לדוגמא אנחנו יודעים שיש אלף תצפיות במדגם הלמידה, כדי להגיע לשגיאה אפס אנחנו יודעים שצריך לפחות 345 איטרציות.

לא נוכיח את זה כאן אבל מי שרוצה יכול לקרוא את אחד המאמרים המקוריים של פרוינד ושפייר, זה פשוט הרבה אלגברה מאוד מאוד נחמדה.

:::

=== 3. אדאבוסט כאלגוריתם אדיטיבי ===

הרבה שאלות צריכות לעלות לנו כשאנחנו מסתכלים על אדאבוסט.

בחשיבה שלנו קודם מגדירים פונקצית הפסד ואז עושים לה מינימיזציה - האם אדאבוסט עושה מינימיזציה לאיזשהו הפסד, ואם כן האם אפשר לייצר אלגוריתמים דומים עם פונקציות הפסד אחרות?

למשל האם האלגוריתם טוב רק לקלסיפיקציה בינארית, או שאנחנו יכולים ליצור משהו דומה לרגרסיה או לקלסיפיקציה ליותר מ2 קלאסים?

ואם אמרנו שההוכחה שהאלגוריתם עובד היא פשוט הרבה אלגברה - האם יש לאלגוריתם הצדקה הסתברותית? זה מזכיר את העובדה שראינו כיצד רגרסיה ליניארית היא קודם כל פתרון סגור באלגברה, שאפשר להצדיק אותו גם מנקודת מבט סטטיסטית, עם הנחה של רעש שמתפלג נורמלית וכולי. יכול להיות שגם כאן נמצא נקודת מבט סטטיסטית?

:::

מסתבר שבאמת אפשר להכליל את אדאבוסט, למשפחה של אלגוריתמים, שאחד מהם ראינו והבטחתי שעוד נראה שוב.

כשדיברנו על שיטות לבחירת משתנים ברגרסיה ליניארית, ראינו שיטה בשם פורוורד סטייג'וויז רגרשן, שלאט לאט מכניסה משתנים למודל, במשקל קטן. משהו בה מאוד מזכיר את אדאבוסט.

ניזכר בפורוורד סטייג'וויז: אנחנו עושים סטנדרטיזציה למשתנים, ומחליטים על גודל צעד קטן אפסילון.

אנחנו בודקים מה השארית בין התצפיות Y לממוצע, מסמנים אותן בR. מאתחלים את המקדמים של כל המשתנים לאפס.

כעת מוצאים את המשתנה האחד שנמצא בקורלציה הגבוהה ביותר עם השארית, והוא המועמד להיכנס למודל. אם אכן הקורלציה גדולה מאיזשהו סף אנחנו מכניסים עוד קצת מהמשתנה למודל אבל רק אפסילון קטן מתוך הקורלציה הזאת.

מחשבים מחדש את השאריות, וחוזרים למצוא את המשתנה הJ הבא עם הכי הרבה קורלציה לשאריות, וכך הלאה, עד שאין משתנה יחיד עם קורלציה מספיק גדולה לשאריות.

:::

את האלגוריתם שכרגע ראינו קל לכתוב הרבה יותר בתור מודל פורוורד אדיטיבי בשלבים, או פורוורד סטייג'וויז אדיטיב מודל:

נתחיל בחיזוי אפס לכל התצפיות.

בכל איטרציה M ניקח איזושהי פונקציה פשוטה של הנתונים שנקרא לה B, שיש לה פרמטרים גאמא. ננסה לעדכן את המודל שיש לנו עד כאן עם הליכה של צעד בטא בכיוון הפונקציה הזאת, באופן שיקטין לנו הכי הרבה איזשהו לוס. או כמו שרשום כאן, נמצא את הפרמטרים בטא וגאמא שיביאו למינימום את הלוס של עדכון פשוט כזה.

נעדכן את המודל עם הפרמטרים שמצאנו ונמשיך לאיטרציה הבאה.

המודל הסופי הוא אכן מודל אדיטיבי, הוא סכום ממושקל של הרבה מודלים קטנים ופשוטים. בביטוי הזה אנחנו גם מייד רואים את הרמז לאדאבוסט אבל זה עוד לא לגמרי ברור.

מכל מקום, אם L הוא שגיאה ריבועית, וגאמא בכל איטרציה פירושה פשוט למצוא את המשתנה האחד עם הקורלציה הכי גדולה לשארית, מה שיש כאן זה בדיוק פורוורד סטייג'וויז רגרשן, מלבד הבדלים זניחים. שם אתחלנו את כל התצפיות בממוצע Y וכאן באפס, שם עשינו את זה עד שלא נמצא יותר משתנה עם מספיק קורלציה לשאריות וכאן אנחנו עושים את זה מספר קבוע של צעדים מראש. מומלץ לעצור רגע ולראות שאתם מבינים מדוע האלגוריתם הזה, הפורוורד סטייג'וויז אדיטיב, הוא צורה כללית הרבה יותר של הפורוורד סטייג'וויז רגרשן.

:::

כעת אני טוען, שגם אדאבוסט הוא מודל פורווד סטייג'וויז אדיטיב.

אני טוען שהלוס שהוא מביא למינימום בכל איטרציה הוא לוס אקספוננציאלי שלא ראינו עדיין, אקספוננט בחזקת מינוס Y שאני מזכיר שהוא מינוס או פלוס 1, כפול החיזוי f(X).

ואם הפונקציות הפשוטות שקראנו להן B הן הקלסיפיירים החלשים שלנו Gm בכל איטרציה -- נקבל בדיוק את אדאבוסט.

אז לפני שנראה את זה, נכיר את הלוס האקספוננציאלי ולמה הוא סביר לבעיה שלנו: נניח שY הוא פלוס 1. אם אנחנו חוזים f(X) בדיד, שהוא גם פלוס ומינוס אחת, אז אם אנחנו חוזים מינוס 1 וטועים אנחנו מקבלים שגיאה של אקספוננט בחזקת 1 כלומר 2.7 בערך, ואם אנחנו חוזים 1 וצודקים אנחנו מקבלים שגיאה של אקספוננט בחזקת מינוס 1, כלומר 0.3 בערך.

אפשר אבל גם להרציף את הטעות הזאת, לחזות f(X) רציף, ואז ככל שהוא שלילי הטעות גדולה יותר, וככל שהוא חיובי הטעות שואפת לאפס.

ועוד דבר קטן, שוב למה אנחנו טורחים כל כך, רק כי זה מעניין? לא, המטרה שלנו היא להכליל לעוד פונקציות הפסד, ולהיות מסוגלים לעשות אדאבוסט לרגרסיה ולבעיות אחרות. אז בואו ניגש למשימה.

:::

האלגוריתם של פורוורד סטייג'וויז אומר לנו בכל איטרציה למצוא את הצעד בטא והגאמא הכי טובים כדי לעשות מינימום ללוס.

נציב את הלוס האקספוננציאלי ונחליף את בי בקלסיפייר החדש שלנו Gm.

עכשיו יש פה אקספוננט בחזקת סכום שאני מפרק למכפלת האקספוננטים.

ואנחנו מסמנים את כל הביטוי הזה כמשקולת w_i שבכל צעד m מבטאת את הלוס באיטרציה האחרונה, אם היה חיזוי טוב היא תהיה קטנה ואם היה חיזוי גרוע, היא תהיה גדולה. נשים לב שהיא לא משתתפת במינימיזציה בגלל זה אני יכול לעשות את זה. הביטוי שקיבלנו כבר מתחיל להזכיר את השגיאה הממושקלת שאנחנו מורידים למינימום באדאבוסט אבל נצטרך עוד קצת אלגברה.

:::

עכשיו בואו נניח לרגע שהפרמטר בטא שמתקבל מבעית המינימיזציה הזאת הוא חיובי, ונראה שהקלסיפייר של אדאבוסט G_m הוא בדיוק הקלסיפייר שנקבל כאן:

יש כאן סכום ממושקל. כשהחיזוי נכון, y כפול G נותן 1 והאלמנט בסכום יהיה e בחזקת מינוס בטא. כשהחיזוי לא נכון, y כפול G נותן מינוס 1, והאלמנט בסכום יהיה e בחזקת בטא. אז אני יכול להפריד את הסכום הזה לשני סכומים, סכום החיזויים הנכונים שנותנים אי במינוס בטא ועוד סכום החיזויים הלא נכונים שנותנים אי בבטא.

אבל גם את זה אני יכול לרשום בצורה יותר קומפקטית שבה G שאני מנסה לעשות עליו מינימום, נמצא רק בביטוי אחד. הדרך לעשות את זה היא לתת לכל התצפיות את האלמנט אי במינוס בטא, ורק לחיזויים הלא נכונים להוסיף אי בבטא פחות אי במינוס בטא.

וזה מראה לי שכדי לקבל את קלסיפייר G האופטימלי בכל שלב m אני צריך לעשות בדיוק את מה שאדאבוסט שאף לעשות בשלב 2a. להגיע לקלסיפייר שיביא למינימום את שגיאת החיזוי הממושקלת. מומלץ לחזור אחורה או לשים את האלגוריתם המקורי לידכם כדי לראות את זה! 

נשאר לי רק להראות שמדובר בדיוק באותן המשקולות.

:::

אז בואו נראה שאנחנו מקבלים בדיוק את אותן המשקולות, ואיך מהאלגוריתם הכללי של פורוורד סטייג'וויז אנחנו מקבלים את הביטוי המוזר לאלפא-אם בכל איטרציה. נזכיר שבכל איטרציה מחשבים לוג של 1 פחות הטעות הממושקלת חלקי הטעות הממושקלת, והמשקולת הנוכחית מוכפלת פי אקספוננט בחזקת אלפא-אם אם היה חיזוי לא נכון.

ואנחנו הגענו לקריטריון שאני פשוט מעתיק שוב כאן, הבנו מה הG שיביא למינימום, נמצא עכשיו מה הבטא שיביא למינימום.

אנחנו גוזרים את הקריטריון לפי בטא, ומשווים לאפס. תשימו לב שאתם מבינים את הגזירה היא די פשוטה.

יש לנו עכשיו משוואה, נכפיל את שני האגפים באותו ביטוי חיובי, והנה אנחנו מוצאים שבטא שיביא למינימום את הקריטריון שלנו, קשור לביטוי שסימנו באלגוריתם אדאבוסט כerr, שגיאת החיזוי הממושקלת חלקי סך המשקולות.

אחרי עוד קצת אלגברה נגיע לביטוי סופי עבור הצעד בטא בכל איטרציה m, ששווה בדיוק לחצי הפרמטר אלפא-אם שאדאבוסט אמר לנו לחשב.

:::

ולמה העובדה הזאת אומרת שהגענו בדיוק לאותו משקול?

כעת האלגוריתם פורוורד סטייג'וויז אומר לעדכן את החיזוי להיות החיזוי באיטרציה הקודמת f אמ-מינוס-1, ועוד, צעד בטא כפול הפונקציה בי עם הפרמטר גאמא הטוב ביותר שנמצא. אצלינו זה פשוט אומר החיזוי עד עכשיו ועוד חצי אלפא-אם כפול הקלסיפייר G הכי טוב שנמצא.

אבל זה אומר שהמשקולות שלנו בכל איטרציה הן בדיוק מה שאדאבוסט אומר לנו לחשב: המשקולות שהגענו אליהן לפני שני שקפים הן הלוס האקספוננצילי מהאיטרציה הקודמת. מציבים את הביטוי שפורוורד סטייג'וויז אומר לנו בfm. ומקבלים שהעדכון שווה למשקולת הקודמת כפול ביטוי שכבר מתחיל להזכיר את הביטוי שאנחנו רוצים להגיע אליו, שמערב את אלפא-אם.

הוא מזכיר מאוד כי הוא שקול! נשים לב שאפשר להגיע בקלות מהמכפלה של y כפול G לביטוי שאנחנו רוצים, האינדיקטור שבודק האם יש לנו כאן חיזוי נכון או לא. באמצעות הקשר מינוס y כפול G שווה לפעמיים האינדיקטור פחות 1.

אנחנו מציבים את הקשר הזה ורואים שהמשקולת באיטרציה הבאה היא תמיד תהיה המשקולת הנוכחית כפול קבוע אקספוננט בחזקת אלפא-אם אם היה חיזוי שגוי, או תישאר כפי שהיא אם היה חיזוי נכון. כל זה כפול איזה קבוע שמכפילים בו את כל המשקולות ולכן אפשר להתעלם ממנו.

בכך קיבלנו את שלב 2d של אדאבוסט, ושוב מומלץ לראות אותו מול העיניים שלכם כדי לראות את זה. ובעצם סיימנו להראות שאדאבוסט מקרה פרטי של אלגוריתם כללי יותר, פורוורד סטייג'וויז אדיטיב, שנותן הנחיה מה לעשות עם כל לוס שנרצה, וגם לסטינג של רגרסיה. זה אולי ידהים אתכם לדעת שהתובנה הזאת לא הגיעה אלא לפחות חמש שנים אחרי שאדאבוסט פותח.

:::

אז אם נישאר רגע עדיין בקלסיפיקציה, לא חייבים להישאר עם הלוס האקספוננציאלי, יש כל מיני לוסים שאולי מתאימים לקלסיפיקציה לשני קלאסים.

נראה שהם לא מאוד שונים אגב, וכולם עושים איזושהי הרצפה ללוס הכי טבעי אבל הלא רציף של מיסקלסיפיקיישן, שהבעיה איתו שהוא לא רגיש, המעבר בו בין עונש ללא-עונש נורא חד, הוא לא מעניש נורא אם החיזוי מאוד מאוד שלילי.

לוס בעייתי לבעיה שלנו, בדיוק כמו שדיברנו ברגרסיה לוגיסטית הוא הלוס הריבועי. כי הוא מתחיל להעניש גם אם החיזוי f(x) חיובי מדי.

נשארנו עם הלוס שלנו האקספוננציאלי, והלוס שראינו למשל כשדיברנו על קרוס אנתרופי כלוס אפשרי לעץ קלסיפיקציה. וכאן אחרי קצת אלגברה אנחנו רושמים אותו כפונקציה של המכפלה y כפול f, כדי שנוכל לראות אותו בהקשר של כולם. באופן מפתיע, הלוס הזה הוא גם הלוס המתקבל תחת נקודת מבט סטטיסטית, שוואי מתפלג ברנולי או בינומי עם איזושהי הסתברות שאותה אנחנו ממדלים בדיוק כמו ברגרסיה לוגיסטית, ואז הלוס שלנו הוא מינוס לוג הנראות. 

זה דורש קצת אלגברה להראות שכל הדברים האלה מתכנסים לאותו דבר, אבל התובנה המדהימה שרציתי שתראו כאן, זה ששתי הפונקציות האלה, הפונקציה שלנו והפונקציה שמגיעה מנקודת מבט סטטיסטית, הן מאוד דומות, אחת היא הלוג של השניה בקירוב!

וזה אומר, שפונקצית החיזוי שאנחנו נמצא בכל שלב של אדאבוסט, שמביאה למינימום לוס אקספונציאלי, צריכה להיות אותה פונקצית חיזוי שתביא למינימום את הלוס של מינוס לוג הנראות, תחת המודל הבינומי, אם נניח שוואי מתפלג ברנולי! מצאנו את נקודת המבט הסטטיסטית לאדאבוסט.

ואיך עושים בוסטינג לרגרסיה? את זה נראה בחלק הבא.

:::

=== 4. בוסטינג לרגרסיה ===

ננסה עכשיו להגיע לאלגוריתם לבוסטינג לרגרסיה באותה גישה של פורוורד סטייג'וויז אדיטיב מודלינג.

:::

ניזכר שוב בהיי-לבל מה ראינו עד עכשיו.

האלגוריתם פורוורד סטייג'ווויז אדיטיב אומר לנו בכל איטרציה למצוא את הצעד בטא ואת הפונקציה הפשוטה בי האופטימליים, כדי להביא למינימום כל לוס, עם מודל אדיטיבי.

הראינו שבקלסיפיקציה בינארית איפה שוואי הוא 1 או מינוס 1, הלוס הוא אקספוננציאלי והפונקציות הפשוטות שלנו הן וויק קלסיפיירים G, מקבלים את אלגוריתם אדאבוסט.

הראינו שברגרסיה איפה שוואי הוא רציף, הלוס ריבועי והפונקציות הפשוטות שלנו הן כל פעם משתנה אחד ויחיד - מקבלים את פורוורד סטייג'וויז רגרשן.

השאלה המתבקשת היא האם אפשר לקחת את הלומדים החלשים האלה G מהאחד, ולשים אותם בשני, ולקבל גרסה ולידית של בוסטינג לרגרסיה. והתשובה היא לגמרי כן. נשים לב רק שברגרסיה אכן נקרא לG באופן כללי לרנרז או רגרסורז, הם כבר לא יהיו קלסיפיירים.

:::

באופן ספציפי, נתמקד בעצים ונרצה לעשות להם בוסטינג. נרצה שהחיזוי שלנו יהיה סכום חיזויים של עצים או סכום ממושקל שאני רגע משמיט רק בשביל הקיצור. ולמה דווקא עצים? בגלל כל היתרונות שלהם שראינו בשיעור הקודם, עצים מטפלים בלי בעיה בסוגי משתנים מגוונים בלי הכנה נוספת, הם יודעים לטפל בתצפיות חסרות, הם לא-ליניאריים מצד אחד אבל לא גמישים מדי מצד שני, ומצד שני החיזוי שלהם בשורה התחתונה הוא לא מאוד טוב, שזה בדיוק מה שאנחנו רוצים בלומד חלש.

נזכור מהו עץ רגרסיה בשורה התחתונה. עץ רגרסיה הוא בעצם חלוקה של הדאטא לJ שכונות Rj, שבכל שכונה אנחנו חוזים מספר יחיד גאמא J.

כלומר כל עץ בעומק קבוע ניתן לרשום בעצמו כמודל אדיטיבי שהחיזוי שלו הוא סכום על כל השכונות, שיחפש לאיזו שכונה התצפית שייכת ויחזה עבורה גאמא J. וכאן אנחנו מתייחסים למודל הזה כמודל פרמטרי לכל דבר, לכל עץ עם מספר שכונות קבוע J יש פרמטרים תטא שמה הם? השכונות עצמן, והמספר שמתאים לכל שכונה, גאמא. 

זה חשוב להבין את זה כי תיכף נזריק את התהליך הזה של בניית עץ אל תוך האלגוריתם פורוורד סטייג'וויז שלנו. לבנות עץ רגרסיה עם עומק קבוע עם לוס ריבועי זה פשוט למצוא את הפרמטרים תטא הכי טובים, למצוא את השכונות והחיזויים הכי טובים כדי לעשות מינימום לשגיאה ריבועית.

:::

אז אם אנחנו ברגרסיה וההפסד הריבועי, אין בעיה. בכל שלב של האלגוריתם סטייג'וויז נמצא את הפרמטרים תטא שמביאים למינימום את ההפסד הריבועי של המודל האדיטיבי. אבל מה זה אומר? לבנות את העץ הכי שחוזה הכי טוב את השאריות!

ולמה אין בעיה, כי זה בדיוק עץ הרגרסיה שאנחנו יודעים לבנות.

אז סיכום ביניים, אם הלוס הוא ריבועי, לעשות בוסטינג לעצי רגרסיה אומר בכל איטרציה m לחשב את השאריות ולבנות עץ רגרסיה לחיזוי השאריות. לעדכן את השאריות ולעבור לאיטרציה הבאה וכולי.

נשים לב שהפעולה הזאת תואמת מאוד את הרציונל של אדאבוסט - בכל שלב תמצה מה שהמודל עד כה לא הצליח לחזות טוב, וברגרסיה זה שאריות, ותמדל את הפער הזה. זה ממש דומה למשקול מחדש של הנתונים.

:::

הבעיה היא מה קורה אם אנחנו רוצים להכליל את הרעיון הזה לכל פונקצית הפסד, גם פונקציות שאנחנו קוראים להן רובסטיות או חסינות יותר מההפסד הריבועי.

סטטיסטיקה רובסטית זה תחום שאפשר לבלות עליו סמסטר שלם. ובכל זאת למה הכוונה -- הכוונה היא לפונקציות הפסד שמושפעות פחות מתצפיות חריגות. הרי הלוס הריבועי מעניש אותנו בשארית בריבוע כשהמודל טועה. שארית אחת שלגביה הוא טועה מאוד יכולה לנפח את הלוס מאוד.

אופציה אחרת היא ההפסד בערך מוחלט, שיעניש אותנו בצורה ליניארית לשארית.

אופציה אחרת היא הפסד הובר למשל, שעד איזשהו קבוע דלתא יעניש את השארית בריבוע, ומדלתא יעניש אותה בצורה ליניארית כמו הערך המוחלט. ויש עוד הרבה גרסאות לפונקציות הפסד חסינות. העניין הוא שאנחנו לא יודעים לבנות עץ רגרסיה לכל פונקציה כזאת, זאת בעיה די קשה.

אז בחלק הבא נכליל את הפרוצדורה של בוסטינג שראינו אפילו יותר, וזה יאפשר לנו לטפל בכל פונקצית הפסד. זה גם יהיה אלגוריתם הבוסטינג המוכר והסופי שנגיע אליו בשיעור הזה, שנמצא בשימוש נרחב כל כך בתעשייה היום.

:::

=== 5. גרדיאנט בוסטינג ===

הגירסה שהתקבעה בסופו של דבר לבוסטינג, נקראת גרדיאנט בוסטינג. לפעמים גרדיאנט בוסטינג מאשינז, לפעמים גרדיאנט בוסטינג טריז. מה הקשר בין מה שראינו לגרדיאנט, או לנגזרת של פונקציה?

:::

ניזכר בשיטה כללית למצוא מינימום של פונקציה מסובכת, כשאין לנו פתרון סגור. אנחנו מתחילים מאיזשהו ניחוש התחלתי לפרמטר שלנו, כאן נגיד פרמטר דו-מימדי תטא. מחשבים את הנגזרת של הפונקציה שלנו ביחס לפרמטר, כלומר הגרדיאנט. הגרדיאנט הוא בעצם הכיוון של ההשתנות הכי מהירה של הפונקציה. כמו להיות על הר גבוה ולחשב איפה הוא יורד הכי מהר. ואז, אנחנו עושים צעד קטן בגודל אפסילון במורד הגרדיאנט. מה שבפועל אומר לקחת את הפרמטרים תטא שיש לנו עד עכשיו, ולהחסיר מהם אפסילון קטן כפול הגרדיאנט.

אנחנו חוזרים על הצעד הזה שוב ושוב, כל פעם מסתכלים בנקודה שבה אנחנו נמצאים מהו הגרדיאנט והולכים במורד הגרדיאנט צעד קטן, עד שנמצא את הפרמטר שמביא למינימום את הפונקציה. לפונקציה כללית נגיע למינימום לוקאלי, ואם הפונקציה קמורה והצעד אפסילון מספיק קטן מובטח לנו שנגיע למינימום גלובלי.

אז מה הקשר למה שאנחנו עושים כאן? מאוחר יותר הבינו חוקרים שהאלגוריתם בוסטינג הפשוט שתיארנו רק לפני רגע, הוא ממש חיקוי של גרדיאנט דיסנט.

:::

במקרה שלנו הפונקציה שאנחנו רוצים לעשות לה מינימום היא פונקצית הפסד, של הרבה תצפיות וחיזויים של התצפיות. הרעיון היפה הוא להתייחס לוקטור התחזיות שלנו כוקטור פרמטרים של הפונקציה. נכון שאלה לא ממש פרמטרים אלה תחזיות שמבוססות על מודל כמו עץ רגרסיה, אבל הרישום הזה מאפשר לנו לפתור את הבעיה שלנו באמצעות גרדיאנט דיסנט.

בכל איטרציה m, נרשום את הגרדיאנט של הפונקצית הפסד שלנו לפי התחזיות שהן עכשיו פרמטרים. ונציב בגרדיאנט את החיזויים האחרונים שיש בידינו.

כעת כדי לקבל חיזויים חדשים, ניקח את החיזויים הקודמים ונלך צעד קטן בכיוון הגרדיאנט, כלומר נחסר מהוקטור הזה צעד אפסילון קטן כפול וקטור הגרדיאנט. ואת זה נעשה שוב ושוב עד שנגיע לחיזויים שמביאים למינימום את פונקצית ההפסד שלנו.

אפשרות נוספת אגב היא לא להסתפק בצעד קטן אפסילון אלא בכל איטרציה לחשב את האפסילון שמתאים ספציפית לאיטרציה הזאת, אפסילון-אם. כלומר לחשב מהו גודל הצעד שיביא למינימום את ההפסד בנקודה הנוכחית לעומת התחזיות החדשות. בפועל לא נראה תמיד שיש יתרון לתוספת הזאת וצעד אפסילון קטן עובד יופי אבל נזכור את הגירסה הזאת גם כן.

:::

בסופו של דבר נקבל שהחיזויים הסופיים שלנו אחרי M איטרציות הם מזכירים מודל אדיטיבי כמו שרצינו. החיזויים הסופיים הם סכום של צעד אפסילון כפול מינוס הגרדיאנט, ועוד צעד אפסילון כפול מינוס הגרדיאנט וכולי.

אבל כאן מופיע הקץ' -- זה לא המודל שרצינו! מה שמתואר כאן זה לא משין לרנינג. אם תתייחסו לn החיזויים כפרמטרים, במקרה הטוב פשוט תגיעו לחיזויים טובים ספציפית על מדגם הלמידה. כשתגיע תצפית חדשה X0 לא תדעו איך לחזות עליה. או במילים אחרות למדתם פרמטרים אבל לא למדתם מודל.

אנחנו רצינו מודל אדיטיבי, למשל סכום של עצים ממושקלים, או שכל אחד יופיע עם משקולת קטנה קבועה.

והנה הפתרון היפה לגשר בין שתי הגישות: בכל איטרציה, כן נלמד מודל, למשל עץ החלטה, והמודל הזה ינסה לקרב את הגרדיאנט!

שימו-לב, לא משנה מה הלוס, הוא יכול להיות הובר או ערך מוחלט, הוא יכול להיות אפילו לוס של קלסיפיקציה -- העץ שאנחנו בונים תמיד יהיה עץ רגרסיה, עם הפסד ריבועי, שמנסה לקרב את הגרדיאנט, כאן אני רושם אותו כפונקציה של L כדי שנבין שאפשר להשתמש בכל פונקצית הפסד. זה עץ שאמרנו שאנחנו יודעים לבנות די בקלות.

ואז, ברגע שיש לנו עץ כזה נוסיף אותו למודל, אולי עם איזו משקולת קטנה אפסילון, ובאיטרציה הבאה נחשב שוב את הגרדיאנט, נמדל אותו עם עץ, וכך הלאה וכך הלאה.

לכן קוראים לכל הגישה גרדיאנט בוסטינג, מדובר על בוסטינג באמצעות גרדיאנט דיסנט. והיא מתאימה לכל פונקצית הפסד שניתן לחשב לה בקלות את הגרדיאנט, אף על פי שהלומדים שמרכיבים אותה הם עצי רגרסיה.

:::

תיכף נסכם את האלגוריתם הסופי אבל קודם נראה כמה קל עבור הלוסים שראינו עד כה למצוא את הגרדיאנט ביחס לחיזויים:

אם ההפסד ריבועי, ונכפיל פי חצי כדי לקבל תוצאה יפה, נקבל את השאריות. שימו-לב, זה אומר שהאלגוריתם בוסטינג הספציפי שראינו לפי רגע הוא מקרה פרטי של גרדיאנט בוסטינג. כי עם לוס ריבועי, וקטור הגרדיאנט הוא בעצם וקטור השאריות!

ואם הלוס הוא ערך מוחלט או הובר, יש לנו ביטויים סגורים ויפים לוקטור הגרדיאנט.

ואפילו אם הלוס הוא בכלל לוס של קלסיפיקציה בינארית, Y הוא אפס או אחת, ואנחנו משתמשים במינוס לוג הנראות הבינומית שראינו קודם בקלסיפיקציה. גם אז וקטור הגרדיאנט שנמדל הוא ביטוי פשוט וסגור, מינוס ההסתברות החזויה לתצפיות שהן 0 או 1 פחות ההסתברות החזויה לתצפיות שהן 1. כשההסתברות החזויה נתונה בביטוי שלפנינו.

מכל מקום, לאיזו פונקצית הפסד שנרצה אפשר להציב את הגרדיאנט באלגוריתם הכללי של גרדיאנט בוסטינג והוא יהיה ולידי.

:::

וככה נראה אלגוריתם גרדיאנט בוסטינג טריז בצורה הכי פשוטה.

נתאחל את החיזויים להיות מה שמביא למינימום את פונקצית ההפסד שבחרנו. אם זה הפסד ריבועי נקבל את ממוצע Y, אם זה הפסד בערך מוחלט נקבל את חציון Y. אפשר להתחיל גם עם חיזוי אפס לכל התצפיות, זה גם יעבוד.

בכל איטרציה m:

נחשב את וקטור הגרדיאנט או הפסאודו-שאריות. למה זה נקרא פסאודו-שאריות, כי עם הפסד ריבועי מדובר ממש בשאריות (להדגים), ובאופן כללי וקטור שמבטא מה שהמודל לא הצליח לחזות עד כאן.

נתאים עץ רגרסיה לשאריות, כלומר על הגירסה הזאת של הדאטא, שאפשר לחשוב עליה כמו באדאבוסט כגירסה ממושקלת של הנתונים כך שכל תצפית מקבלת משקולת גדולה יותר אם לא הצלחנו לחזות אותה עד כה.

ונעדכן את המודל, נוסיף את העץ שלנו עם צעד אפסילון קטן שיכול להיות לרנינג רייט קבוע מראש או ספציפי לאיטרציה הנוכחית.

אחרי M איטרציות המודל שנקבל יהיה מודל אדיטיבי של אנסמבל של עצי החלטה, עם משקולת קטנה קבועה או משקולת ייחודית לכל אחד, שנבנו בצורה אדפטיבית, אחד אחרי השני, כל פעם על גרסה אחרת של הנתונים.

נשים לב שיש כאן כמה פרמטרים שצריך לעשות עליהם טיונינג:
מספר העצים -- בניגוד לרנדום פורסט שם מובטח לנו שלא נעשה אוברפיטינג עם עוד עצים, כאן אין הבטחה כזאת -- אבל נגיד שעדיין בפועל על נתונים אמיתיים בוסטינג נוטה לתת תוצאות טובות עם הרבה עצים, במיוחד אם שולטים בעומק העצים.
וזה בדיוק הפרמטר הבא - לאילו עצים בוסטינג יכול לסייע במיוחד, עצים עמוקים או עצים לא עמוקים? אנחנו רוצים וויק לרנרז, שלומדים תופעות פשוטות אבל יציבות, שלאט לאט כשנצרף את כולן נקבל מודל חזק, כלומר בפועל בבוסטינג אנחנו מעדיפים עצים לא עמוקים מדי, בדרך כלל עומק 2 עד 4, ואפילו גזעים של עצים ראינו שעובד.

והפרמטר האחרון הוא קצב הלמידה אפסילון, שהוא כמו גודל הצעד בגרדיאנט דיסנט, אם אנחנו אומרים שהוא קבוע לכל האיטרציות. אבל גם כאן בפועל לנתונים אמיתיים ערך דיפולטיבי כמו 0.01 או 0.001 עובד היטב.

:::

כאן אנחנו רואים את בוסטינג על הקרדיט דאטא, בהם אנחנו מנסים למדל עבור כל אדם את היתרה בחשבון שלה מכמה משתנים כמו אם הוא סטודנט או לא, או מה נתוני האשראי שלו. במקרה הזה אפשר לראות שבוסטינג משפר בהרבה את שגיאת החיזוי של עץ יחיד, הקו הכתום הוא ממוצע הMSE על תצפיות שהמודל לא ראה בפרוצדורת קרוס ולידיישן, ואנחנו משתמשים בערכים הדיפולטיביים לכל הפרמטרים שהתוכנה נותנת, כאן זה בוסטינג באמצעות sklearn בפייתון.

במקרה הזה לא נראה שיש נטייה למודל לעשות אוברפיטינג אם נוסיף עוד ועוד עצים, הוא גם מבצע קצת יותר טוב מרנדום פורסט שראינו בשיעור הקודם.

בשורה התחתונה בוסטינג שמבוסס על עצים הוא אחד האלגוריתמים הטובים ביותר אוף דה שלף להתאים לנתונים טבלאיים גדולים, יש לו הרבה מימושים מאוד מהירים כמו xgboost, ולפני מהפיכת הדיפ לרנינג הוא גם היה בשימוש רב בבעיות של קומפיוטר ויז'ן בהן הדאטא הוא תמונות. נתראה בשיעור הבא.

:::
